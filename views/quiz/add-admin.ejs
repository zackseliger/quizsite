<%- include('../layouts/header') -%>

<link href="/lib/nouislider.css" rel="stylesheet">
<script src="/lib/nouislider.js"></script>
<script src="/lib/sortable.js"></script>

<!-- quill stuff -->
<link href="/lib/quill.snow.css" rel="stylesheet">
<script src="/lib/quill.min.js"></script>

<style>
	.result-card, #quiz-questions {
		min-width: 400px;
		margin: 10px 0;
		padding: 20px;
		background-color: #FFF;
		border-radius: 3px;
	}
	.result-card:hover {
		background-color: #EEE;
	}
	.result-card span {
		font-weight: bold;
	}
	.result-card p, .question-card p {
		margin: 0;
		font-size: 16px;
	}
	.question-card {
		padding: 5px;
	}
	.question-card:hover {
		background-color: #EEE;
	}
	.edit-result-button, .edit-question-button {
		float: right;
		font-weight: 400;
		cursor: pointer;
	}
	.noUi-target {
		background: linear-gradient(90deg, rgba(254,24,24,1) 0%, rgba(255,255,255,1) 30%, rgba(0,255,59,1) 60%);
	}
	.answer {
		display: none;
	}
</style>

<div style="border:3px solid black;left:25%;width:50%;height:50%;display:none;position:fixed;background-color:#FFF;border-radius:3px;text-align:center;box-shadow:#999 0 0 10px;" id="modal">
	<div style="cursor:pointer;right:5px;position:absolute;top:3px;" onclick="(()=>$('#modal').hide())();"><i class="fa fa-window-close"></i></div>
	<div id="modal-content" style="overflow:auto;height:100%;"></div>
</div>

<h1 style="margin-left: 20px;">Create a Quiz</h1>

<div style="width:95%;margin:0 auto;display:flex;justify-content:space-between;">
	<div style="display:inline-block;max-width:50%;">
		<div class="collapsible-container">
			<h2 class="collapsible-toggle"><i class="collapsible-arrow fa fa-arrow-down" aria-hidden="true"></i>Results</h2>
			<input type="text" placeholder="Name" id="result-name-input"/><br/>
			<textarea placeholder="Description" id="result-description-input"></textarea><br/>
			<button onclick="saveResult()">Save</button>
		</div>

		<div class="collapsible-container">
			<h2 class="collapsible-toggle"><i class="collapsible-arrow fa fa-arrow-down" aria-hidden="true"></i>Questions</h2>
			<textarea placeholder="Question" id="question-input"></textarea><br/>
			<div id="question-answers">
				<input type="text" placeholder="Answer 1"/><br/>
				<input type="text" placeholder="Answer 2"/><br/>
			</div>
			<button onclick="showQuestionEffects()">Effects</button>
			<button onclick="saveQuestion()">Save</button>
		</div>

		<div class="collapsible-container">
			<h2 class="collapsible-toggle"><i class="collapsible-arrow fa fa-arrow-down" aria-hidden="true"></i>Misc</h2>
			<input type="text" placeholder="Title" id="quiz-title" /><br/>
			<textarea id="quiz-description" placeholder="Description"></textarea><br/>
			<label>Quiz Image: </label><input type="file" id="quiz-image"/>
		</div>
	</div>

	<div style="display:inline-block;vertical-align:top;margin-left:5%;">
		<div id="quiz-questions"></div>
		<div id="quiz-results"></div>
	</div>
</div>

<div style="width:70%;height:50%;margin:0 auto;background-color:#FFF">
	<div id="article-editor"></div>
</div>

<div class="content-box visible-background">
	<h2>Answer Distributions</h2>
	<div id="answer-distribution">

	</div>
</div>

<button onclick="uploadQuiz()">Submit</button>

<script>
	let quill = new Quill('#article-editor', {
		theme: 'snow',
		placeholder: 'write a short article...',
		modules: {
			toolbar: [[{ 'header': [1, 2, 3, false] }], ['bold', 'italic', 'underline'], ['link', 'image'], [{ 'list': 'ordered'}, { 'list': 'bullet' }], ['clean']]
		}
	});

	//the quiz object that goes to the server
	let quizData = new FormData();
	let results = [];
	quizData.append("ownerId", <%= myuser.id %>);
	//globals
	let distributions = [];
	let resultEditIndex = -1;
	let questionEditIndex = -1;

	function saveResult() {
		let cardHtml = `\n\t<span>${$("#result-name-input").val()}</span>
	<span class="edit-result-button"><i class="fa fa-edit"></i></span>
	<p>${$("#result-description-input").val()}</p>\n`;

		if (resultEditIndex === -1) {
			$("#quiz-results").append(`<div class="result-card">${cardHtml}</div>`);
			//add to results array
			results.push({
				name: $("#result-name-input").val(),
				description: $("#result-description-input").val()
			});
		}
		else {
			//edit the html on the result card
			$('.result-card').each((index, card) => {
				if (index === resultEditIndex) {
					$(card).empty();
					$(card).append(`${cardHtml}`);
				}
			});
			//edit the result
			results[resultEditIndex].name = $("#result-name-input").val();
			results[resultEditIndex].description = $("#result-description-input").val();
		}

		//add listeners to result cards
		$('.edit-result-button').off('click');
		$(".edit-result-button").click(function(e) {
			resultEditIndex = $('.result-card').index($(this).closest('.result-card'));
			$("#result-name-input").val(results[resultEditIndex].name);
			$("#result-description-input").val(results[resultEditIndex].description);
		});

		//clear input and textarea
		$("#result-name-input").val("");
		$("#result-description-input").val("");
		resultEditIndex = -1;
	}

	//show model with sliders
	function showQuestionEffects() {
		if ($('.slider').length !== results.length*($("#question-answers input").length-1)) {
			$('#modal-content').empty();
			$('#question-answers input').each((index, val) => {
				if ($(val).val() === "") return;

				let effectCode = ``;
				for (let i = 0; i < results.length; i++) {
					effectCode += `<span style="font-size:16px;position:relative;left:-30%;">${results[i].name}</span><span class="effect-value"></span><br/><div class="slider" style="width:80%;display:inline-block;"></div><br/>`;
				}
				$('#modal-content').append(`<div style="font-weight:bold;margin:20px 0 0 0;">${$(val).val()}</div>${effectCode}`);
			});
			makeSliders();
		}
		$("#modal").show();
	}

	//create sliders from all divs with the class 'slider'
	function makeSliders() {
		let sliders = document.getElementsByClassName('slider');
		for (let i = 0; i < sliders.length; i++) {
			noUiSlider.create(sliders[i], {
				start: 3,
				step: 1,
				range: {
					'min': 0,
					'max': 10
				}
			});

			//make text update when value of slider changes
			sliders[i].noUiSlider.on('update', function(e) {
				$(sliders[i]).siblings('span').eq(i*2+1).text(sliders[i].noUiSlider.get()-3);
			});
		}
	}

	function saveQuestion() {
		//build answers array
		let answers = [];
		$("#question-answers input").each((index, val) => {
			if ($(val).val() === "") return;

			answers.push({answer: $(val).val(), effects: []});
		});
		$(".effect-value").each((index, val) => {
			answers[Math.floor(index/results.length)].effects.push($(val).text());
		});

		//create html for the answers
		let html = ``;
		for (let i = 0; i < answers.length; i++) {
			html += `<span class="answer">${answers[i].answer}<span class="effects">`;
			for (let j = 0; j < answers[i].effects.length; j++) {
				html += `${answers[i].effects[j]} `;
			}
			html += `</span></span>`;
		}

		//put html on the quiz questions div and make it sortable
		let insideCardCode = `<p>${$("#question-input").val()} <span class="edit-question-button"><i class="fa fa-edit"></i></span></p>${html}`;
		if (questionEditIndex === -1) {
			$("#quiz-questions").append(`<div class="question-card">${insideCardCode}</div>`);
			sortable("#quiz-questions");
		}
		else {
			$(".question-card").eq(questionEditIndex).empty();
			$(".question-card").eq(questionEditIndex).append(insideCardCode);
		}

		//add listeners to result cards
		$('.edit-question-button').off('click');
		$(".edit-question-button").click(function(e) {
			questionEditIndex = $('.question-card').index($(this).closest(".question-card"));
			$("#question-input").val($(this).closest(".question-card").children("p").text());
			//put answers into input boxes
			$(this).closest(".question-card").children(".answer").each((index, answer) => {
				$("#question-answers input").eq(index).val($(answer).contents()[0].nodeValue);//put answer text into input box
				$("#question-answers input").eq(index).keyup();//fire keyup event to make new input below it
			});

			//put effect values into modal
			showQuestionEffects();
			//load slider values
			let nums = []
			$(".question-card").eq(questionEditIndex).children(".answer").children(".effects").each((index, effectSpan) => {
				let vals = $(effectSpan).text().split(' ');
				for (let i = 0; i < vals.length; i++) {
					if (!isNaN(parseInt(vals[i]))) nums.push(parseInt(vals[i]));
				}
			})
			sliders = document.getElementsByClassName('slider');
			for (let i = 0; i < sliders.length; i++) {
				sliders[i].noUiSlider.set(nums[i]+3);
			}
			$("#modal").hide();//hide it so it's not too annoying
		});

		//clear inputs relating to questions
		$("#question-input").val("");
		$("#question-answers input").each((index, val) => {
			$(val).val("");
		});

		//empty modal for next question
		$('#modal-content').empty();
		questionEditIndex = -1; //if we were editing something, we're not anymore

		//update answer distributions
		distributions = [];
		for (let i = 0; i < results.length; i++) distributions.push(0);
		//for each question, sum up the effects
		$(".question-card").each((index, card) => {
			$(card).children(".answer").each((i, answer) => {
				let nums = $(answer).children(".effects").text().split(' ');
				for (let i = 0; i < results.length; i++) {
					distributions[i] += parseInt(nums[i]);
				}
			});
		});
		//put answer distributions to the div
		$("#answer-distribution").empty();
		let answerHtml = ``;
		for (let i = 0; i < results.length; i++) {
			answerHtml += `<p><span style="font-weight:bold">${results[i].name}:</span> ${distributions[i]}</p>`;
		}
		$("#answer-distribution").append(answerHtml);
	}

	$(document).ready(() => {
		//adding or removing question answers
		$('#question-answers').on('paste keyup', function(e) {
			if ($("#question-answers input").eq($("#question-answers input").length-1).val().length > 0) {
				$('#question-answers').append(`<input type="text" placeholder="Answer ${$("#question-answers input").length+1}"/><br/>`);
			}
			else if ($("#question-answers input").eq($("#question-answers input").length-1).val().length === 0 && $("#question-answers input").eq($("#question-answers input").length-2).val().length === 0 && $("#question-answers input").length > 2) {
				$(this).children().eq($(this).children().length-1).remove();//remove input
				$(this).children().eq($(this).children().length-1).remove();//remove newline
			}
		});

		// have the toggle thing for collapsible containers
		$('.collapsible-container .collapsible-toggle').click(function(e) {
			let container = $(this).closest('.collapsible-container');
			let children = container.children();

			$(this).find('.collapsible-arrow').toggleClass('fa-arrow-down');
			$(this).find('.collapsible-arrow').toggleClass('fa-arrow-right');

			if ($(children).eq(1).is(":visible")) {
				children.each((index, val) => {
					if (index > 0) $(val).hide("fast");
				});
			}
			else {
				children.each((index, val) => {
					if (index > 0) $(val).show("fast");
				});
			}
		});
	});

	//building and sending the request with the quiz
	function uploadQuiz() {
		//go through all question 
		let questions = [];
		$("#quiz-questions .question-card").each((index, val) => {
			questions.push({
				question: $(val).children("p").text(),
				answers: []
			});
			$(val).children('.answer').each((index, val) => {
				questions[questions.length-1].answers.push({
						answer: $(val).contents()[0].nodeValue,
						effects: $(val).children("span").text().split(" ").map((val) => parseInt(val)).slice(0, results.length)
				})
			});
		});

		//title, description, image, and article
		quizData.append("quizTitle", document.getElementById("quiz-title").value);
		quizData.append("quizDescription", document.getElementById("quiz-description").value);
		quizData.append("quizImage", document.getElementById("quiz-image").files[0]);
		quizData.append("quizArticle", quill.root.innerHTML);
		//results and questions
		quizData.append("quizResults", JSON.stringify(results));
		quizData.append("quizQuestions", JSON.stringify(questions));

		sendQuiz();
	}

	<% if (locals.quiz) { %>
		//sends request for editing
		function sendQuiz() {
			let request = new XMLHttpRequest()
			request.onreadystatechange = function() {
				if (this.readyState == XMLHttpRequest.DONE) {
					console.log(request.responseText);
					if (request.responseText === "ok") {
						window.location.replace("/dashboard");
					}
				}
			};
			request.open("POST", window.location.href);
			request.send(quizData);
		}

		$(document).ready(() => {
			//title, description, and article
			$("#quiz-title").val("<%= quiz.title %>");
			$("#quiz-description").val("<%= quiz.description %>");
			quill.clipboard.dangerouslyPasteHTML(`<%- quiz.article %>`);

			<%
				//this is to turn a JSON string to an ejs-JSON string I guess? otherwise crashes on front end bc of invalid JSON
				let escapeChars = ["\"", "n"];
				for (let i = 0; i < quiz.results.length-1; i++) {
					if (quiz.results[i] === "\\" && escapeChars.indexOf(quiz.results[i+1]) !== -1) {
						quiz.results = quiz.results.slice(0, i) + "\\" + quiz.results.slice(i);
						i++;
					}
				}
			%>
			//results
			quizResultsString = `<%= quiz.results %>`;
			let quizResults = JSON.parse(`<%- quiz.results %>`);
			for (let i = 0; i < quizResults.length; i++) {
				$("#result-name-input").val(quizResults[i].name);
				$("#result-description-input").val(quizResults[i].description);
				saveResult();
			}

			//questions
			let quizQuestions = JSON.parse(`<%- quiz.questions %>`);
			for (let i = 0; i < quizQuestions.length; i++) {
				$("#question-input").val(quizQuestions[i].question);
				//put answers into input boxes
				for (let j = 0; j < quizQuestions[i].answers.length; j++) {
					$("#question-answers input").eq(j).val(quizQuestions[i].answers[j].answer);
					$("#question-answers input").eq(j).keyup();
				}

				//put effect values into modal
				showQuestionEffects();
				let nums = [];
				let sliders = document.getElementsByClassName('slider');
				for (let j = 0; j < quizQuestions[i].answers.length; j++) {
					for (let k = 0; k < quizQuestions[i].answers[j].effects.length; k++) {
						sliders[j*quizQuestions[i].answers[j].effects.length + k].noUiSlider.set(quizQuestions[i].answers[j].effects[k]+3);
					}
				}
				$("#modal").hide();//hide it so it's not too annoying

				//save the question
				saveQuestion();
			}
		});
	<% } else {%>
		//sends request for adding
		function sendQuiz() {
			let request = new XMLHttpRequest();
			request.onreadystatechange = function() {
				if (this.readyState == XMLHttpRequest.DONE) {
					console.log(request.responseText);
					if (request.responseText === "ok") {
						window.location.replace("/dashboard");
					}
				}
			};
			request.open("POST", "/addquiz");
			request.send(quizData);
		}
	<% } %>
</script>

<%- include('../layouts/footer') -%>